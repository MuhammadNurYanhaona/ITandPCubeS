# As this version of the compilers can be used to generate executable for different back-end
# types and architectures, one needs to specify during compiling the IT source code which
# backend he is targetting. The backend's structural information is retrieved from two files:
# a .ml file provides a textual, simplified PCubeS description of the machine and a .cn file
# specifies how the cores are numbered within each hardware unit. The following properties
# describe where to search for those two files. Note that the files must have the mentioned
# extentions and there should not be more than one pair of such files in that directory 
#
# Note that relative paths start from the project root, i.e., one step above this directory.
# If you keep your hardware descriptions elsewhere then give the absolute paths
multicore.machine.model.dir=machine-models/yan-laptop
segmented.memory.machine.model.dir=machine-models/rivana-cluster

# The thread affinity should be set to true if we want the generated code to dictate what 
# logical processing unit(LPU) should executed where. This is important for ensuring high-
# performance. That, however, also means that the code generated for one target hardware may 
# not work in some other hardware. This is because the second hardware must have the cores 
# the first has to start the threads of a task in them. Disabling thread affinity allows even
# a unicore machine to run massively multi-threaded program -- but without any predictable
# performance characteristics. 
thread.affinity.enabled=true

# All IT compilers use some backend C++ compiler to generate the final binary executable from
# a source code. The user can spacify what optimizations should be enabled for the backend C++
# compilers. 
c.optimization.flags=-O2 -g 
