NOTE: Update the last-update-date below each time you make a change in this document so that we know
      when the errors were relevant. Further, if you know that a problem has been fixed already but has
      still been listed here, remove the problem from the list.

Last Update Date: Aug 15, 2016


1. In some machines, compilation fails for correct IT sample programs showing wierd errors related to
   incorrectly recording arrays or partitions' dimensionality. This never happens in some other machines
   suggests that the issue may be with the underlying compiler tools we are using. In particular, 
   probably, we have to use strdup() in many places before passing a character string to some other 
   function.
2. The current grammar definition does not allow an un-partitioned LPS to appear as a descendant of 
   another LPS. This is problematic, as sometimes we may want such an LPS just to expose fewer data
   structures to PPSes executing lower level LPUs.
3. Error messages generated by the IT compilers only tells what line the error is on. This is not enough
   for syntax errors as the programmer needs to know what word or column in that line is the cause of
   error. We need to update the lexical analysis process to retain the column number (even better a 
   reference to the program line) of each token and then use that additional information for better 
   error reporting.
4. Sometimes having a newline or not before/after curly braces cause syntax error. This problem used
   to occur quite frequently before. Although I haven't observed it lately, the error might be still 
   there. Some grammar rules need to be corrected.
5. If, a code has reduction inside an multi-index IT parallel loop, the reduction is supposed to take
   place either once or many times depending on the nature of reduction statement. The current compilers
   however, always assume the reduction should happen once. This is an error in the interpretation that
   we need to fix. To intensify the problem, the compiler generated variables to aid in the reduction 
   are not placed in properly. So reductions placed inside multi-index loops are translated as incorrect
   C++ code snippets.
6. The implementation of the block_count partition function is assigning the extra elements to the last
   partition when the underlying dimension being partitioned is not evenly divisible by the part count.
   This is an incorrect behavior that can cause the hybrid compiler to generate incorrect CUDA kernels.
   Rather, the last partition should have the fewest elements when the dimension is not evenly divisible.
7. Currently the multicore compiler does not support data structures that have multiple epoch versions.
8. Currently the multicore compiler does not support data structure partitions that have padding in them.  	   
