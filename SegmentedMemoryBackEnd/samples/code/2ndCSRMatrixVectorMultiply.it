Task "CSR Matrix Vector Multiply":
	Define:
		columns, rows, scan_index: 1D Array of Integer	
		values, v, w: 1D Array of Real double-precision
		i, s, segmentLength: Integer
		segments: Range
	Environment:
		values, columns, rows, v: link
		w: create
	Initialize:
		segments.min = 0
		segments.max = partition.p - 1
		segmentLength = v.dimension.length / partition.p
		w.dimension = scan_index.dimension = rows.dimension
	Compute:
		// initialize the array that keep track of how far progress has been made processing
		// elements from a row of the sparse matrix
		"Calculate Start Scan Indexes" (Space A) {
			do {	
				if (r > 0) { scan_index[r] = rows[r - 1] + 1
				} else { scan_index[r] = 0 }
			} for r in rows
		}
		"Process Segments" (Space B) {
			// multiply a segment of input vector with a section of a row of the matrix 
			"Multiply Segment" (Space C) {
				last_column = columns[rows[i]]
				start_column = s * segmentLength
				end_column = start_column + segmentLength - 1
				if (s == segments.max || end_column > last_column) { 
					end_column = last_column 
				}
				if (scan_index[i] <= rows[i]) {
					index = scan_index[i]
					column = columns[index]
					if (start_column <= column && end_column >= column) {
						do {
							value = values[index]	
							w[i] = w[i] + value * v[column]
							index = index + 1
							if (index <= rows[i]) { column = columns[index] }
						} while column <= end_column && index <= rows[i]
						scan_index[i] = index
					}
				}				
			}
			// iterate over all rows that have been assigned to current Space A LPU	
			Repeat: from "Multiply Segment" for i in rows.local.dimension.range
		}
		// process only a single segment of the input vector at a time for all rows in the matrix
		Repeat: from "Process Segments" for s in segments	
	Partition(p, r):
		Space A <un-partitioned> { rows, scan_index }
		Space B <1D> divides Space A partitions { w, rows, scan_index: block_size(r) }
		Space C <1D> divides Space B partitions {
			w, scan_index, rows, columns, values: replicated
			v: block_count(p)
		}
