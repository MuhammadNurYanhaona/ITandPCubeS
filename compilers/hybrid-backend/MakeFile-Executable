.PHONY: clean 

# These properties should be passed to the make file to tailer the output based on current
# need
C_COMPILER = mpic++
C_OPT_FLAGS = -g -Wall -fno-inline -Wno-unused -Wno-sign-compare -O0
BUILD_SUBDIR = tmp
EXECUTABLE = ./bin/it-program.o

# Compiler and its optimization settings for the GPU
CUDA_COMPILER = nvcc
# settings for CUDA compiler
CUDAFLAGS= -x cu -dc -g
# settings for newer GPGPU target hardwares 
GPUARCH = sm_30

# Set the default target. When you make with no arguments, this will be the target built.
default: build

# Set up the list of sources to be included as static C++ libraries from the compiler
RUNTIME_LIBS = $(shell find src -name "*.cc" -path "src/runtime/*")
UTILITY_LIBS = $(shell find src -not -name "hashtable.cc" -name "*.cc" -path "src/utils/*")
PARTITION_LIBS = $(shell find src -name "*.cc" -path "src/partition-lib/*")
MM_MANAGEMENT_LIBS = $(shell find src -name "*.cc" -path "src/memory-management/*")
COMMUNICATION_LIBS = $(shell find src -name "*.cc" -path "src/communication/*")
IO_LIBS = $(shell find src -name "*.cc" -path "src/input-output/*")
ENV_MANAGEMENT_LIBS = $(shell find src -name "*.cc" -path "src/environment/*")

# Set up the list of sources that are the broker code between C++ and CUDA
OFFLOAD_MGMT_LIBS = $(shell find src -name "*.cc" -path "src/gpu-offloader/*")

# Set up the list of sources generated for the IT program
BUILD_SRCS = $(shell find build/$(BUILD_SUBDIR) -name "*.cc")
CUDA_SRCS = $(shell find . -name "*.cu")

# objects for compiling any generated code for IT program
C_OBJS = $(patsubst %.cc, %.o, $(filter %.cc, $(BUILD_SRCS))) 		\
	$(patsubst %.cc, %.o, $(filter %.cc, $(RUNTIME_LIBS)))		\
	$(patsubst %.cc, %.o, $(filter %.cc, $(UTILITY_LIBS)))		\
	$(patsubst %.cc, %.o, $(filter %.cc, $(PARTITION_LIBS))) 	\
	$(patsubst %.cc, %.o, $(filter %.cc, $(MM_MANAGEMENT_LIBS)))	\
	$(patsubst %.cc, %.o, $(filter %.cc, $(COMMUNICATION_LIBS)))	\
	$(patsubst %.cc, %.o, $(filter %.cc, $(ENV_MANAGEMENT_LIBS)))	\
	$(patsubst %.cc, %.o, $(filter %.cc, $(IO_LIBS)))		\
	$(patsubst %.cc, %.o, $(filter %.cc, $(OFFLOAD_MGMT_LIBS)))

# cuda object files
CUDA_OBJS = $(patsubst %.cu, %.o, $(filter %.cu, $(CUDA_SRCS)))			    	

# Define the backend compilers and linker to be used
CC = $(C_COMPILER)
LD = $(C_COMPILER)
CUDA = $(CUDA_COMPILER)

# backend code optimization settings
CFLAGS = $(C_OPT_FLAGS)

# We need flag to enable the POSIX thread library during compiling generated code
RFLAG = -pthread

# Link with standard c, math, pthreads, and cuda libraries
LIBS = -lc -lm -pthread -lcudart

# C++ library links for external code blocks
EXTERN_LIBS = $(shell grep 'C++ =\|C = \|CUDA =' build/$(BUILD_SUBDIR)/external_links.txt  | cut -f2 -d "=" | tr '\n' ' ')

# Rules for various parts of the target

.cc.o: $*.cc
	$(CC) $(CFLAGS) $(RFLAG) -c -o $@ $*.cc

%.o: %.cu
	$(CUDA) -arch=$(GPUARCH) $(CUDAFLAGS) -c $*.cu -o $@

gpuCode.obj: $(CUDA_OBJS)
	$(CUDA) -arch=$(GPUARCH) -dlink $(CUDA_OBJS) -o $@

build: $(C_OBJS) gpuCode.obj
	$(LD) -o $(EXECUTABLE) $(C_OBJS) $(CUDA_OBJS) $(LIBS) $(EXTERN_LIBS) gpuCode.obj
	rm -f gpuCode.obj

clean:
	rm -rfv  build/$(BUILD_SUBDIR)
	rm -f gpuCode.obj
	rm -f bin/it-program.o

	

