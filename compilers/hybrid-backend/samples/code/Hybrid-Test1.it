Program (args) { 
        hetEnv = new TaskEnvironment(name: "Hybrid Execution Test")
	bind_input(hetEnv, "matrix", args.input_file)
        execute("Hybrid Execution Test"; hetEnv; Partition: args.p, args.q, args.r)
        bind_output(hetEnv, "matrix", args.output_file)
}

Task "Hybrid Execution Test":
	Define:
		matrix: 2D Array of Real double-precision
		max_entries: 1D Array of Real double-precision
		normalizer: Real double-precision
		t: Epoch
	Environment:
		matrix: link
	Initialize:
		max_entries.dimension1 = matrix.dimension1
	Compute:
		"Determine Max Value In Row" (Space B) {
			do {
				do {
					max_entries[i] = reduce("max", matrix[i][j])
				} for j in matrix
			} for i in matrix
		}
		"Determine Matrix Maximum" (Space A) {
			do {
				normalizer = reduce("max", max_entries[i])
			} for i in max_entries
		}
		"Normalize Matrix" (Space D) { 
			do { 
				matrix[i][j] at (t) = matrix[i][j] at (t - 1) / normalizer
			} for i, j in matrix
		}
	Partition (p, q, r):
		Space A <un-partitioned> { max_entries }
		Space B <1D> { max_entries, matrix<dim1>: block_count(p) }
		Space C <2D> divides Space B partitions { matrix: block_size(q, r) }
		Space D <1D> divides Space C partitions { matrix<dim1>: block_size(1) }
