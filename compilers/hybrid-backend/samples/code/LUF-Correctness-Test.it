// the goal of this program is to test the correctness of two LU factorization code. One uses multiple tasks to 
// implement a block algorithm for LU factorization when the other implements the same logic within a single 
// task. The block LUF algorithm processes the upper and triangular matrices as fixed length blocks of rows and 
// columns. The program allows to define the number of block-iteration should be performed to enable comparison
// of intermediate results.

Program (args) { 

	blockSize = args.block_size
	iterations = args.iterations

	//---------------------------------------------------------------- Multi-tasked program implementation
	
	initEnv = new TaskEnvironment(name: "Initiate LU")
	bind_input(initEnv, "a", args.input_file)
	execute("Initiate LU"; initEnv; Partition: blockSize)
	luEnv = new TaskEnvironment(name: "Transposed LU Factorization")
	luEnv.u = initEnv.u
	luEnv.l = initEnv.l
	rows = initEnv.a.dimension1.range
	max1 = rows.max
	max2 = initEnv.a.dimension2.range.max
	iter_range = new Range(min: 0, max: iterations - 1)
	k = 0

	do in sequence {
		k = i * blockSize
		lastRow = k + blockSize - 1
		if (lastRow > max1) { lastRow = max1 }
		range = new Range(min: k, max: lastRow)
		execute("Transposed LU Factorization"; luEnv; Initialize: range; Partition: blockSize)
		if (lastRow < max1) {
			mMultEnv = new TaskEnvironment(name: "SAXPY")
			mMultEnv.a = luEnv.u[(lastRow + 1)...max1][k...lastRow]
			mMultEnv.b = luEnv.l[k...lastRow][(lastRow + 1)...max2]
			mMultEnv.c = luEnv.u[(lastRow + 1)...max1][(lastRow + 1)...max2]
			execute("SAXPY"; mMultEnv; Partition: blockSize)
		}
	} for i in iter_range
	
	//----------------------------------------------------------------------------------------------------
	
	//------------------------------------------------------------------------- Single-task implementation

	blufEnv = new TaskEnvironment(name: "Block LU Factorization")
        bind_input(blufEnv, "a", args.input_file)
        execute("Block LU Factorization"; blufEnv; Initialize: iter_range; Partition: blockSize)

	//----------------------------------------------------------------------------------------------------
        
	bind_output(luEnv, "u", args.output_file_1)
        bind_output(blufEnv, "u", args.output_file_4)
        bind_output(luEnv, "l", args.output_file_2)
        bind_output(blufEnv, "l", args.output_file_5)
        bind_output(luEnv, "p", args.output_file_3)
        bind_output(blufEnv, "p", args.output_file_6)

}
	
Task "Initiate LU":
	Define:
		a, u, l: 2D Array of Real double-precision
	Environment:
		a: link
		u, l: create
	Initialize:
		u.dimension1 = l.dimension1 = a.dimension2
                u.dimension2 = l.dimension2 = a.dimension1
	Compute:
		"Prepare" (Space A) {
			do { u[j][i] = a[i][j] } for i, j in a
			do { l[i][i] = 1 } for i in l
		}
	Partition(b):
		Space A <1D> {
			a<dim2>, u<dim1>, l<dim1>: block_stride(b)
		}	

Task "Transposed LU Factorization":
	Define:
		u, l: 2D Array of Real double-precision
		p: 1D Array of Integer
		pivot, k: Integer
		l_row, l_column, p_column: 1D Array of Real double-precision
		t: Epoch
		k_range: Range
	Environment:
		u, l: link
		p: link-or-create
	Initialize (k_range):
		p.dimension = l_column.dimension = p_column.dimension = u.dimension1
		l_row.dimension = l.dimension2
	Compute:
		"Select Pivot" (Space B)
		Activate if k in u.local.dimension1.range {
                        do { pivot = reduce ("maxEntry", u[k][j]) } for j in u and j >= k
		}
		"Store Pivot" (Space A) {	
			p[k] = pivot
		}
		"Interchange Rows" (Space B) {
			if (k != pivot) {
                                do {    pivot_entry = u[i][k]
                                        u[i][k] = u[i][pivot]
                                        u[i][pivot] = pivot_entry
                                } for i in u and i >= k
                                do {    pivot_entry = l[i][k]
                                        l[i][k] = l[i][pivot]
                                        l[i][pivot] = pivot_entry
                                } for i in l and i < k
                        }
		}
		"Update Lower" (Space B)
		Activate if k in l.local.dimension1.range {
			do {    l[k][j] = u[k][j] / u[k][k]
				u[k][j] = 0
                                l_row[j] = l[k][j]
                        } for j in l and j > k
		}
		"Update Upper Rows Block" (Space B) {
			do {    u[i][j] = u[i][j] - l_row[j] * u[i][k] 
                        } for i, j in u and i > k and i <= k_range.max and j > k
		}
		"Update Upper Columns Block" (Space A) {
			"Collect L Column Part" (Space B) {
				do {    l_column[i] = l[i][k]
				} for i in l and i >= k_range.min and i < k
			}
			"Generate Pivot Column" (Space A) {
				do { p_column[i] = l_column[i]
				} for i in l_column and i >= k_range.min and i < k
			}
			"Update U Columns" (Space B) {
				do {    u[i][k] = u[i][k] - u[i][j] * p_column[j]
				} for i, j in u and i > k_range.max and j >= k_range.min and j < k
			}
		}	
		Repeat: from "Select Pivot" for k in k_range
	Partition (b):
		Space A <un-partitioned> { p, p_column, l_column }
		Space B <1D> divides Space A partitions {
			u<dim1>, l<dim1>, l_column: block_stride(b)
			l_row, p_column: replicated
		} 

Task "SAXPY":
	Define:
		a, b, c: 2D Array of Real double-precision
	Environment:
		a, b, c: link
	Compute:
		"Block multiply matrices" (Space A) { 
			do { 
				do { total = reduce ("sum", a[i][k] * b[k][j]) } for k in a
				c[i][j] = c[i][j] - total
			} for i, j in c
		}
		Repeat: from "Block multiply matrices" foreach Space A sub-partition
	Partition (p):
		Space A <2D> {
			c: block_size(p, p)
			a: block_size(p), replicated
			b: replicated, block_size(p)
			Sub-partition <1D> <unordered> {
				a<dim2>, b<dim1>: block_size(p)
			}
		}


Task "Block LU Factorization":
	Define:
		a, u, l: 2D Array of Real double-precision
		p: 1D Array of Integer
		l_row, l_column, p_column: 1D Array of Real double-precision
		u_block, l_block: 2D Array of Real double-precision
		pivot, k, r, iter, block_size: Integer
		row_range, iter_range: Range
	Environment:
		a: link
		u, l, p: create
	Initialize(iter_range):
		u.dimension1 = l.dimension1 = a.dimension2
                u.dimension2 = l.dimension2 = a.dimension1
		p.dimension = a.dimension1
		block_size = partition.b
		l_row.dimension = l.dimension2
		l_column.dimension = p_column.dimension = l.dimension1
		u_block.dimension1 = u.dimension1
		u_block.dimension2.range.min = l_block.dimension1.range.min = 0
		u_block.dimension2.range.max = l_block.dimension1.range.max = block_size - 1
		l_block.dimension2 = l.dimension2
	Compute:
		"Prepare L and U" (Space B) {
			do { u[j][i] = a[i][j] } for i, j in a
			do { l[i][i] = 1 } for i in l
		}
		"Compute L and U Block" (Space A) {
			"Calculate Row Range" (Space A) {
				r = iter * block_size
				last_row = r + block_size - 1
				if (last_row > a.dimension1.range.max) { 
					last_row = a.dimension1.range.max 
				}
				row_range.min = r
				row_range.max = last_row
			}
			"Select Pivot" (Space B)
			Activate if k in u.local.dimension1.range {
				do { pivot = reduce ("maxEntry", u[k][j]) } for j in u and j >= k
			}
			"Store Pivot" (Space A) {	
				p[k] = pivot
			}
			"Interchange Rows" (Space B) {
				if (k != pivot) {
					do {    pivot_entry = u[i][k]
						u[i][k] = u[i][pivot]
						u[i][pivot] = pivot_entry
					} for i in u and i >= k
					do {    pivot_entry = l[i][k]
						l[i][k] = l[i][pivot]
						l[i][pivot] = pivot_entry
					} for i in l and i < k
				}
			}
			"Update L" (Space B)
			Activate if k in l.local.dimension1.range {
				do {    l[k][j] = u[k][j] / u[k][k]
					u[k][j] = 0
					l_row[j] = l[k][j]
				} for j in l and j > k
			}
			"Update U Rows Block" (Space B) {			
				do {	u[i][j] = u[i][j] - l_row[j] * u[i][k] 
				} for i, j in u and i > k and i <= row_range.max and j > k
			}
			"Update U Columns Block" (Space A) {
				"Collect L Column Part" (Space B) {
					do {	l_column[i] = l[i][k]
					} for i in l and i >= row_range.min and i < k
				}
				"Generate Pivot Column" (Space A) {
					do { p_column[i] = l_column[i]
					} for i in l_column and i >= row_range.min and i < k
				}
				"Update U Columns" (Space B) {
					do {	u[i][k] = u[i][k] - u[i][j] * p_column[j]
					} for i, j in u and i > row_range.max and j >= row_range.min and j < k
				}
			}
			Repeat: from "Select Pivot" for k in row_range 
		}
		"Update Remaining U Section" (Space A) {
			"Copy Updated Block of U" (Space B) {
				do {	column = j - row_range.min
					u_block[i][column] = u[i][j] 
				} for i, j in u and i > row_range.max and j >= row_range.min and j <= row_range.max
			}
			"Copy Updated Block of L" (Space B) 
			Activate if r in l.local.dimension1.range {
				do {	row = i - row_range.min
					l_block[row][j] = l[i][j] 
				} for i, j in l and i >= row_range.min and i <= row_range.max and j > row_range.max
			}
			"Block MM_Multiply Subtract" (Space C) {
				if (iter < iter_range.max) {
					do {	do { total = reduce ("sum", u_block[i][m] * l_block[m][j]) 
						} for m in u_block
						u[i][j] = u[i][j] - total
					} for i, j in u and i > row_range.max and j > row_range.max
				}
			}
			Repeat: from "Block MM_Multiply Subtract" foreach Space C sub-partition
		}
		Repeat: from "Compute L and U Block" for iter in iter_range		
	Partition(b):
		Space A <un-partitioned> { 
			a, p, l_column, l_row, p_column, l_block, u_block 
		}
		Space B <1D> divides Space A partitions {
			a<dim2>, u<dim1>, u_block<dim1>, l<dim1>, l_column: block_stride(b)
			l_row, p_column, l_block: replicated 
		}
		Space C <2D> divides Space B partitions {
			u: block_size(b, b)
			u_block: block_size(b), replicated
			l_block: replicated, block_size(b)	
			Sub-partition <1D> <unordered> {
				u_block<dim2>, l_block<dim1>: block_size(b)
			}
		} 
