Program (args) { 
	blockSize = args.block_size
	initEnv = new TaskEnvironment(name: "Initiate LU")
	load_array(initEnv.a, args.argument_matrix_file)
	execute("Initiate LU"; initEnv)
	luEnv = new TaskEnvironment(name: "Transposed LU Factorization")
	luEnv.u = initEnv.u
	luEnv.l = initEnv.l
	rows = initEnv.a.dimension1.range
	max1 = rows.max
	max2 = initEnv.a.dimension2.range.max

	do in sequence {
		lastRow = k + blockSize - 1
		if (lastRow > max1) { lastRow = max1 }
		range = new Range(min: k, max: lastRow)
		execute("Transposed LU Factorization"; luEnv; Initialize: range; Partition: blockSize)
		if (lastRow < max1) {
			mMultEnv = new TaskEnvironment(name: "Subtract Matrix Multiply Result")
			mMultEnv.a = luEnv.u[(lastRow + 1)...max1][k...lastRow]
			mMultEnv.b = luEnv.l[k...lastRow][(lastRow + 1)...max2]
			mMultEnv.c = luEnv.u[(lastRow + 1)...max1][(lastRow + 1)...max2]
			execute("Subtract Matrix Multiply Result"; mMultEnv; Partition: args.k, args.l, args.q)
		}
	} for k in rows step blockSize

	store_array(initEnv.a, args.argument_matrix_file)
	store_array(luEnv.u, args.upper_matrix_file)
	store_array(luEnv.l, args.lower_matrix_file)
	store_array(luEnv.p, args.pivot_matrix_file)
}
	
Task "Initiate LU":
	Define:
		a, u, l: 2D Array of Real double-precision
	Environment:
		a: link
		u, l: create
	Initialize:
		u.dimension1 = l.dimension1 = a.dimension2
                u.dimension2 = l.dimension2 = a.dimension1
	Compute:
		"Prepare" (Space A) {
			do { u[j][i] = a[i][j] } for i, j in a
			do { l[i][i] = 1 } for i in l
		}
	Partition:
		Space A <1D> {
			a<dim2>, u<dim1>, l<dim1>: stride()
		}	

Task "Transposed LU Factorization":
	Define:
		u, l: 2D Array of Real double-precision
		p: 1D Array of Integer
		pivot, k: Integer
		l_row, l_column, p_column: 1D Array of Real double-precision
		t: Epoch
		k_range: Range
	Environment:
		u, l: link
		p: link-or-create
	Initialize (k_range):
		p.dimension = l_column.dimension = p_column.dimension = u.dimension1
		l_row.dimension = l.dimension2
	Compute:
		"Select Pivot" (Space B)
		Activate if k in u.local.dimension1.range {
                        do { pivot = reduce ("maxEntry", u[k][j]) } for j in u and j >= k
		}
		"Store Pivot" (Space A) {	
			p[k] = pivot
		}
		"Interchange Rows" (Space B) {
			if (k != pivot) {
                                do {    pivot_entry = u[i][k]
                                        u[i][k] = u[i][pivot]
                                        u[i][pivot] = pivot_entry
                                } for i in u and i >= k
                                do {    pivot_entry = l[i][k]
                                        l[i][k] = l[i][pivot]
                                        l[i][pivot] = pivot_entry
                                } for i in l and i < k
                        }
		}
		"Update Lower" (Space B)
		Activate if k in l.local.dimension1.range {
			do {    l[k][j] = u[k][j] / u[k][k]
				u[k][j] = 0
                                l_row[j] = l[k][j]
                        } for j in l and j > k
		}
		"Update Upper Rows Block" (Space B) {
			do {    u[i][j] = u[i][j] - l_row[j] * u[i][k] 
                        } for i, j in u and i > k and i <= k_range.max and j > k
		}
		"Update Upper Columns Block" (Space A) {
			"Collect L Column Part" (Space B) {
				do {    l_column[i] = l[i][k]
				} for i in l and i >= k_range.min and i < k
			}
			"Generate Pivot Column" (Space A) {
				do { p_column[i] = l_column[i]
				} for i in l_column and i >= k_range.min and i < k
			}
			"Update U Columns" (Space B) {
				do {    u[i][k] = u[i][k] - u[i][j] * p_column[j]
				} for i, j in u and i > k_range.max and j >= k_range.min and j < k
			}
		}	
		Repeat: from "Select Pivot" for k in k_range
	Partition (b):
		Space A <un-partitioned> { p, p_column, l_column, l }
		Space B <1D> divides Space A partitions {
			u<dim1>, l<dim1>, l_column: block_stride(b)
			l_row, p_column: replicated
		} 

Task "Subtract Matrix Multiply Result":
	Define:
		a, b, c: 2D Array of Real double-precision
	Environment:
		a, b, c: link
	Compute:
		"Block multiply matrices" (Space A) { 
			do { 
				do { total = reduce ("sum", a[i][k] * b[k][j]) } for k in a
				c[i][j] = c[i][j] - total
			} for i, j in c
		}
		Repeat: from "Block multiply matrices" foreach Space A sub-partition
	Partition (k, l, q):
		Space A <2D> {
			c: block_size(k, l)
			a: block_size(k), replicated
			b: replicated, block_size(l)
			Sub-partition <1D> <unordered> {
				a<dim2>, b<dim1>: block_size(q)
			}
		}
