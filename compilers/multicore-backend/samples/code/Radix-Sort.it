Task "Radix Sort":
	Define:
		keys, scatter_offsets, l: 1D Array of Integer
		f: 1D Array of Boolean
		g: 2D Array of Integer
		radix, digits, round, r: Integer
		sorting_rounds: Range
		t: Epoch
	Environment:
		keys: link
	Initialize (digits, key_size):
		radix = 2 ** digits
		scatter_offsets.dimension = f.dimension = l.dimension = keys.dimension
		g.dimension1.range.min = 0
		g.dimension1.range.max = partition.p - 1
		g.dimension2.range.min = 0
		g.dimension2.range.max = radix - 1
		sorting_rounds.min = 0
		sorting_rounds.max = key_size / digits - 1
	Compute:
		// calculate the number of keys that have different values for the current digit place in each partition
		"Upsweep Reduction" (Space B) {
			// determine which keys in the array have r in the current digit place 
			"Digit Decoding" (Space B) {
				max = radix - 1
				ones = max << (round * digits)
				r_value = r << (round * digits)
				do { 
					if ((keys[i] & ones) == r_value) { l[i] = 1 
					} else { l[i] = 0 }
				} for i in keys
			}
			// determine the total number of local keys that have 1 in the current digit place for value r
			"Local Reduction" (Space B) {
				do { total_ones = reduce("sum", l[i]) } for i in l
				local_reduce_index = g.local.dimension1.range.min
				g[local_reduce_index][r] = total_ones
			}
			// iterate the local keys for all r values and do the above two steps
			Repeat: from "Digit Decoding" for r in g.dimension2.range
		}
		// determine the starting offsets for the entries belonging to different partitions for various values for 
		// the current digit place
		"Top Level Scan" (Space A) {
			current_sum = 0
			do in sequence {
				do in sequence {
					current_value = g[i][rd]	
					g[i][rd] = current_sum
					current_sum = current_sum + current_value
				} for i in g.dimension1.range
			} for rd in g.dimension2.range
		}
		// calculate the exact offsets of all local keys within a partition using the information of the starting
		// offset of first key with a particular value in the current digit place
		"Downsweep Scatter" (Space B) {
			// again, determine which keys in the array have r in the current digit place 
			"Flag Vector Generation" (Space B) {
				max = radix - 1
				ones = max << (round * digits)
				r_value = r << (round * digits)
				do { f[i] = ((keys[i] & ones) == r_value) } for i in keys
			}
			// determine the distribution offsets of keys respective to the first key with r at the digit place
			"Assign Scatter Offsets" (Space B) {
				current_sum = g[g.local.dimension1.range.min][r]
				do in sequence {	
					if (f[i]) { 
						scatter_offsets[i] = current_sum
						current_sum = current_sum + 1 
					}
				} for i in f.dimension1.range
			}
			// do the offset calculation for all possible values in the current digit place
			Repeat: from "Flag Vector Generation" for r in g.dimension2.range
		}
		// finally shuffle the keys based on the calculated scatter offsets to finish one round of distribution sort
		"Rearrange Input Sequence" (Space A) {
			do { keys[scatter_offsets[i]] at (t) = keys[i] at (t - 1) } for i in keys
		}
		// repeat from the beginning to have as many rounds of distribution sort as required by the size of the keys
		Repeat: from "Upsweep Reduction" for round in sorting_rounds
	Partition (p):
		Space A <un-partitioned> { 
			keys, g, scatter_offsets 
		}
		Space B <1D> divides Space A partitions { 
			keys, scatter_offsets, f, l: block_count(p)
			g<dim1>: block_size(1) 
		}
