Task "LU Factorization":
	Define:
		a, u, l: 2D Array of Real double-precision
		p: 1D Array of Integer
		pivot, k: Integer
		l_row: 1D Array of Real double-precision
	Environment:
		a: link
		u, l, p: create
	Initialize:
		u.dimension = l.dimension = a.dimension
		l_row.dimension = l.dimension1
		p.dimension = a.dimension1
	Compute:
		"Prepare" (Space B) {
			do { u[j][i] = a[i][j] } for i, j in a
			do { l[i][i] = 1 } for i in l
		}
		"Select Pivot" (Space B)
		Activate if k in u.local.dimension1.range {
			maxEntry = u[k][k]
			pivot = k
			do {	if (u[k][j] > maxEntry) {
					maxEntry = u[k][j]
					pivot = j		
				}
			} for j in u and j >= k
		}
		"Store Pivot" (Space A) {	
			p[k] = pivot
		}
		"Interchange Columns" (Space B) {
			if (k != pivot) {
				do { 	pivot_entry = u[i][k]
					u[i][k] = u[i][pivot]
			     		u[i][pivot] = pivot_entry
				} for i in u and i >= k
				do { 	pivot_entry = l[i][k]
					l[i][k] = l[i][pivot]
			     		l[i][pivot] = pivot_entry
				} for i in l and i < k
			}
		}
		"Update Lower" (Space B)
		Activate if k in l.local.dimension1.range {
			do {	l[k][j] = u[k][j] / u[k][k]
				l_row[j] = l[k][j]
			} for j in l and j > k
		}
		"Update Upper" (Space D) {
			do { u[i][j] = u[i][j] - l_row[j] * u[i][k] 
			} for i, j in u and i >= k and j > k
		}
		Repeat: from "Select Pivot" for k in a.dimension1.range
	Partition (r, s):
		Space A <un-partitioned> { p }
		Space B <1D> divides Space A partitions {
			a<dim1>, u<dim1>, l<dim1>: stride()
			l_row: replicated
		}
		Space C <1D> divides Space B partitions {
			u<dim2>, l<dim2>, l_row: block_size(r)
		}
		Space D <1D> divides Space C partitions {
			u<dim1>, l<dim1>: block_size(s)
			l_row: replicated
		}  
