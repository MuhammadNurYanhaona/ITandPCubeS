.PHONY: clean 

BUILD_SUBDIR = tmp
EXECUTABLE = ./bin/it-program.o

# Set the default target. When you make with no arguments, this will be the target built.
default: build

# Set up the list of sources to be included as static libraries from the compiler
RUNTIME_LIBS = $(shell find src -name "*.cc" -path "src/runtime/*")
UTILITY_LIBS = $(shell find src -not -name "hashtable.cc" -name "*.cc" -path "src/utils/*")
PARTITION_LIBS = $(shell find src -name "*.cc" -path "src/partition-lib/*")

# Set up the list of sources generated for the IT program
BUILD_SRCS = $(shell find build/$(BUILD_SUBDIR) -name "*.cc")

# objects for compiling any generated code for IT program
OBJS =	$(patsubst %.cc, %.o, $(filter %.cc, $(BUILD_SRCS))) 	\
	$(patsubst %.cc, %.o, $(filter %.cc, $(RUNTIME_LIBS)))	\
	$(patsubst %.cc, %.o, $(filter %.cc, $(UTILITY_LIBS)))	\
	$(patsubst %.cc, %.o, $(filter %.cc, $(PARTITION_LIBS)))

# Define the backend C++ compiler and linker to be used
CC= g++
LD = g++

# settings for development and debugging
CFLAGS = -g -Wall -fno-inline -Wno-unused -Wno-sign-compare -O0
# settings for optimized code generation
#CFLAGS = -O3 -mtune=native -march=native -mfpmath=sse

# We need flag to enable the POSIX thread library during compiling generated code
RFLAG = -pthread

# Link with standard c library, math library, and lex library
LIBS = -lc -lm -pthread

# Rules for various parts of the target

.cc.o: $*.cc
	$(CC) $(CFLAGS) $(RFLAG) -c -o $@ $*.cc

build: $(OBJS)
	$(LD) -o $(EXECUTABLE) $(OBJS) $(LIBS)

clean:
	rm -rfv  build/$(BUILD_SUBDIR)

	

