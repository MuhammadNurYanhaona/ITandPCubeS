Program (args) { 
        lufEnv = new TaskEnvironment(name: "LU Factorization")
        bind_input(lufEnv, "a", args.input_file)
        execute(task: "LU Factorization"; environment: lufEnv)
        bind_output(lufEnv, "u", args.output_file_1)
        bind_output(lufEnv, "l", args.output_file_2)
        bind_output(lufEnv, "p", args.output_file_3)
}

Task "LU Factorization":
	Define:
		a, u, l: 2d Array of Real single-precision
		p: 1d Array of Integer
		pivot: Integer Reduction
		k: Integer
		l_column: 1d Array of Real single-precision
	Environment:
		a: link
		u, l, p: create
	Initialize:
		u.dimension = l.dimension = a.dimension
		l_column.dimension = l.dimension1
		p.dimension = a.dimension1
	Stages:
		prepare(a, u, l) {
			do { u[i][j] = a[i][j] } for i, j in a
			do { l[i][i] = 1 } for i in l
		}
		selectPivot(pivot, u, k) {
			do { reduce(pivot, "max_entry", u[i][k]) } for i in u and i >= k
		}
		storePivot(p, k, pivot) { 
			p[k] = pivot 
		}
		interchangeRows(u, l, k, pivot) {
			do { 	pivot_entry = u[k][j]
				u[k][j] = u[pivot][j]
				u[pivot][j] = pivot_entry
			} for j in u and j >= k
			do { 	pivot_entry = l[k][j]
				l[k][j] = l[pivot][j]
				l[pivot][j] = pivot_entry
			} for j in l and j < k
		}
		updateLower(u, l, l_column, k) {
			do { l[i][k] = u[i][k] / u[k][k] } for i in l and i > k
			l_column = l[...][k]
		}
		updateUpper(u, l_column, k) {
			do { u[i][j] = u[i][j] - l_column[i] * u[k][j] } for i, j in u and i > k and j >= k
		}
	Computation:
		Space A {
			Space B { prepare(a, u, l) }
			Repeat for k in a.dimension1.range {
				Space B {	
					Where k in u.local.dimension2.range { 
						selectPivot(Space A: pivot, u, k) 
					}
				}
				storePivot(p, k, pivot)
				Space B {
					If k != pivot { interchangeRows(u, l, k, pivot) }
					Where k in l.local.dimension2.range { updateLower(u, l, l_column, k) }
					updateUpper(u, l_column, k)	
				}
			}
		}
	Partition:
		Space A <un-partitioned> { p, a }
		Space B <1d> divides Space A partitions {
			a<dim2>, u<dim2>, l<dim2>: stride()
			l_column: replicated
		} 
