Program (args) { 
	luEnv = new TaskEnvironment(name: "Block LU Factorization")
	bind_input(luEnv, "a", args.input_matrix_file)
	execute(task: "Block LU Factorization"; environment: luEnv; partition: args.block_size)
	bind_output(luEnv, "u", args.upper_matrix_file)
	bind_output(luEnv, "l", args.lower_matrix_file)
	bind_output(luEnv, "p", args.pivot_matrix_file)
}

Task "Block LU Factorization":
	Define:
		a, u, l: 2d Array of Real double-precision
		p: 1d Array of Integer
		l_row, l_column, p_column: 1d Array of Real double-precision
		u_block, l_block: 2d Array of Real double-precision
		pivot: Integer Reduction
		k, r, block_size: Integer
		row_range: Range
	Environment:
		a: link
		u, l, p: create
	Initialize:
		u.dimension1 = l.dimension1 = a.dimension2
                u.dimension2 = l.dimension2 = a.dimension1
		p.dimension = a.dimension1
		block_size = partition.b
		l_row.dimension = l.dimension2
		l_column.dimension = p_column.dimension = l.dimension1
		u_block.dimension1 = u.dimension1
		u_block.dimension2.range.min = l_block.dimension1.range.min = 0
		u_block.dimension2.range.max = l_block.dimension1.range.max = block_size - 1
		l_block.dimension2 = l.dimension2
	Stages:
		prepareLU(a, u, l) {
			do { u[j][i] = a[i][j] } for i, j in a
			do { l[i][i] = 1 } for i in l
		}
		calculateRowRange(a, row_range, block_size) {
			last_row = r + block_size - 1
			if (last_row > a.dimension1.range.max) { 
				last_row = a.dimension1.range.max 
			}
			row_range.min = r
			row_range.max = last_row
		}
		selectPivot(pivot, u, k) {
			do { reduce(pivot, "max_entry", u[k][j]) } for j in u and j >= k
		}
		storePivot(p, k, pivot) {	
			p[k] = pivot
		}
		interchangeRows(pivot, k, u, l) {
			do {    pivot_entry = u[i][k]
				u[i][k] = u[i][pivot]
				u[i][pivot] = pivot_entry
			} for i in u and i >= k
			do {    pivot_entry = l[i][k]
				l[i][k] = l[i][pivot]
				l[i][pivot] = pivot_entry
			} for i in l and i < k
		}
		updateL(l, k, l_row) {
			do {    l[k][j] = u[k][j] / u[k][k]
				u[k][j] = 0
				l_row[j] = l[k][j]
			} for j in l and j > k
		}
		updateURowsBlock(u, l_row, k, row_range) {			
			do {	u[i][j] = u[i][j] - l_row[j] * u[i][k] 
			} for i, j in u and i > k and i <= row_range.max and j > k
		}
		collectLColParts(l_column, l, k, row_range) {
			do {	l_column[i] = l[i][k]
			} for i in l and i >= row_range.min and i < k
		}
		generatePivotColumn(p_column, l_column, row_range, k) {
			do { p_column[i] = l_column[i]
			} for i in l_column and i >= row_range.min and i < k
		}
		updateUColsBlock(u, p_column, k, row_range) {
			do {	u[i][k] = u[i][k] - u[i][j] * p_column[j]
			} for i, j in u and i > row_range.max and j >= row_range.min and j < k
		}
		copyUpdatedUBlock(u_block, row_range, u) {
			do {    column = j - row_range.min
				u_block[i][column] = u[i][j] 
			} for i, j in u and i > row_range.max and j >= row_range.min and j <= row_range.max
                }
		copyUpdatedLBlock(l_block, row_range, l) {
			do {	row = i - row_range.min
				l_block[row][j] = l[i][j] 
			} for i, j in l and i >= row_range.min and i <= row_range.max and j > row_range.max
		}
		saxpy(u, u_block, l_block, row_range) {
			do {	
				total = 0.000000
				do {	total = total + u_block[i][m] * l_block[m][j] 
				} for m in u_block
				u[i][j] = u[i][j] - total
			} for i, j in u and i > row_range.max and j > row_range.max
		}
	Computation:
		Space A {
			Space B {
				prepareLU(a, u, l)
			}
			Repeat for r in a.dimension1.range step block_size {
				calculateRowRange(a, row_range, block_size)
				Repeat for k in row_range {
					Space B {
						Where k in u.local.dimension1.range { selectPivot(Space A: pivot, u, k) }
					}
					storePivot(p, k, pivot)
					Space B {
						If k != pivot { interchangeRows(pivot, k, u, l) }
						Where k in l.local.dimension1.range  { updateL(l, k, l_row) }
						updateURowsBlock(u, l_row, k, row_range)	
						collectLColParts(l_column, l, k, row_range)
					}	
					generatePivotColumn(p_column, l_column, row_range, k)
					Space B {
						updateUColsBlock(u, p_column, k, row_range)
					}
				}
				Space B {
					copyUpdatedUBlock(u_block, row_range, u)
					Where r in l.local.dimension1.range { copyUpdatedLBlock(l_block, row_range, l) }	
					Space C {
						Repeat foreach sub-partition {
							saxpy(u, u_block, l_block, row_range)
						}
					}
				}
			}
		}
	Partition(b):
		Space A <un-partitioned> { 
			a, p, l_column, l_row, p_column, l_block, u_block 
		}
		Space B <1d> divides Space A partitions {
			a<dim2>, u<dim1>, u_block<dim1>, l<dim1>, l_column: block_stride(b)
			l_row, p_column, l_block: replicated 
		}
		Space C <2d> divides Space B partitions {
			u: block_size(b, b)
			u_block: block_size(b), replicated
			l_block: replicated, block_size(b)	
			Sub-partition <1d> <unordered> {
				u_block<dim2>, l_block<dim1>: block_size(b)
			}
		} 
