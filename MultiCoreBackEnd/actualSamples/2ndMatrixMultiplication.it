// A dual space matrix multiplication code that computes c as the result of multiplying
// a and b in a block-by-block fasion.
Task "Matrix Multiply":
	Define:
		a, b, c: 2D Array of Real single-precision
	Environment:
		a, b: link
		c: create
	Initialize:
		c.dimension1 = a.dimension1
		c.dimension2 = b.dimension2
	Compute:
		// The underlying computation for block matrix multiplication is the same
		// of that of simple matrix multiplication algorithm	
		"Block multiply matrices" (Space B) { 
			do { c[i][j] = c[i][j] + a[i][k] * b[k][j]
			} for i, j in c; k in a
		}
		Repeat: from "Block multiply matrices" foreach Space A sub-partition
	Partition (k, l, q, m, n):
		// Higher level space, Space A, defines what portion of c should be computed
		// within a single PCU (parallel computation unit) 
		Space A <2D> {
			c: block_size(k, l)
			a: block_size(k), replicated
			b: replicated, block_size(l)
			// block-by-block flow of data inside a PCU is governed by the 
			// sub-partition specification 
			Sub-partition <1D> <unordered> {
				a<dim2>, b<dim1>: block_size(q)
			}
		}
		// partition specification for the lower space PCUs where actual computation
		// takes place
		Space B <2D> divides Space A sub-partitions {
			c: block_size(m, n)	
			a: block_size(m), replicated 
			b: replicated, block_size(n)
		}
