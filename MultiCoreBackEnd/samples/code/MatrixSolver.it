Program (arguments):

	luEnv = new TaskEnvironment("LU Factorization")
	luEnv.a = load_array(arguments.matrix_file)
	execute("LU Factorization"; luEnv)

	perEnv = new TaskEnvironment("Permutation")
	perEnv.p = luEnv.p
	perEnv.u = load_array(arguments.input_vector_file)
	execute("Permutation"; perEnv; Partition: arguments.blockCount, 1)
	fsEnv = new TaskEnvironment("Substitution")
	fsEnv.m = luEnv.l
	fsEnv.v = perEnv.v 
	execute("Substitution"; fsEnv; Initialize: true)
	bsEnv = new TaskEnvironment("Substitution")
	bsEnv.m = luEnv.u
	bsEnv.v = fsEnv.v
	execute("Substitution"; bsEnv; Initialize: false)
	store_array(bsEnv.v, arguments.output_vector_file)

//---------------------------------------------------------------------- Permutation Task
Task "Permutation":
	Define:
		p: 1D Array of Integer
		u, v: 1D Array of Real single-precision
	Environment:
		p, u: link
		v: create
	Initialize:
		v.dimension = u.dimension
	Compute:
		"Permute" (Space A) {
			do {	
				v[p[i]] = u[i]
			} for i in u
		}	
	Partition(n):
		Space A <1D> { p, u, v: block_count(n) }	
	
//--------------------------------------------------------------------- Substitution Task	
Task "Substitution":
	Define:
		m: 2D Array of Real single-precision
		v: 1D Array of Real single-precision
		index_range: Range
		v_element: Real single-precision
		k: Integer
	Environment:
		m, v: link
	Initialize (lower_triangular_system):
		if (lower_triangular_system) {
			index_range = v.dimension1.range
		} else {
			index_range.min = v.dimension1.range.max
			index_range.max = 0
		}
	Compute:
		"Calculate Next Element" (Space A) 
		Activate if k in v.local.dimension.range {
			v_element = v[k] / m[k][k]
			v[k] = v_element
		}
		"Column Sweep" (Space A) {
			if (index_range.min < index_range.max) { 
				do {
					result = reduce ("sum", m[i][k] * v_element)
				} for i in m and i > k
			} else {
				do {
					result = reduce ("sum", m[i][k] * v_element)
				} for i in m and i < k
			}
			v[k] = v[k] - result
		}
		Repeat: from "Calculate Next Element" for k in index_range
	Partition: 
		Space A <1D> { m<dim2>, v: stride() }	 	

//-------------------------------------------------------------------- Factorization Task	
Task "LU Factorization":
	Define:
		// a is the input coefficient matrix; u and l are the upper and lower triangular matrixes 
		// that will be generated as the result of LU decomposition
		a, u, l: 2D Array of Real single-precision
		// P is a one dimentional array representing the permutation matrix for LU decomposition
		// with partial pivoting
		p: 1D Array of Integer
		// pivot is used to indicate the row to be used as the pivot row in the k-th iteration
		pivot, k: Integer
		// l_column is a shared data structure used to communicate the transformed column of l in 
		// any iteration to all partition for their update of U
		l_column: 1D Array of Real single-precision
		t: Epoch
	Environment:
		a: link
		u, l, p: create
	Initialize:
		u.dimension = l.dimension = a.dimension
		l_column.dimension = l.dimension1
		p.dimension = a.dimension1
	Compute:
		// initialize u and l matrices
		"Prepare" (Space B) {
			do { u[i][j] = a[i][j] } for i, j in a
			do { l[i][i] = 1 } for i in l
		}
		// determine the pivot index as the row index with maximum value in current k-th column
		"Select Pivot" (Space C)
		Activate if k in u.local.dimension2.range {
			do {
				pivot = reduce ("maxEntry", u[i][k]) 
			} for i in u and i >= k
		}
		// store the index of the original pivot row in the pivot array 
		"Store Pivot" (Space A) {	
			p[k] = pivot
		}
		// interchanges current k-th and pivot rows in both upper and lower matrices
		"Interchange Rows" (Space B) {
			if (k != pivot) {
				do { 	u[k][j] at (t) = u[pivot][j] at (t-1)
			     		u[pivot][j] at (t) = u[k][j] at (t-1)
				} for j in u and j >= k
				do { 	l[k][j] at (t) = l[pivot][j] at (t-1)
			     		l[pivot][j] at (t) = l[k][j] at (t-1) 
				} for j in l and j < k
			}
		}
		// calculate the values of the entries of current pivot column and assign the column to a 
		// shared data structure so that it will be synchronized wherever needed before its next use   
		"Update Lower" (Space C)
		Activate if k in l.local.dimension2.range {
			"Calculate Pivot Column" (Space D) {
				do { l[i][k] = u[i][k] / u[k][k]
				} for i in l and i > k
			}
			"Update Shared Structure" (Space C) {
				l_column = l[...][k]
			}
		}
		// update remaining entries of the upper triangular matrix using the pivot row and column
		"Update Upper" (Space B) {
			do { u[i][j] = u[i][j] - l_column[i] * u[k][j] 
			} for i, j in u and i > k and j >= k
		}
		// repeat aforementioned computation from Select Pivot stage until all rows are traversed
		Repeat: from "Select Pivot" for k in a.dimension1.range
	Partition(s):
		Space A <un-partitioned> { p }
		Space B <1D> divides Space A partitions {
			a<dim2>, u<dim2>, l<dim2>: stride ()
			l_column: replicated
		} 
		Space C <1D> <dynamic> divides Space A partitions { 
			u<dim2>, l<dim2>: block_size (1)
			l_column: replicated
		}
		Space D <1D> divides Space C partitions {
			u<dim1>, l<dim1>: block_size (s)
		}
