Program (args): 
	blockSize = args.block_size
	initEnv = new TaskEnvironment("Initiate L & U")
	initEnv.a = load_array(args.matrix_file)
	execute("Initiate L & U"; initEnv; Partition: args.s)
	luEnv = new TaskEnvironment("Transposed LU Factorization")
	luEnv.u = initEnv.u
	luEnv.l = initEnv.l
	rows = initEnv.a.dimension1.range
	max1 = rows.end
	max2 = initEnv.a.dimension2.range.end

	do in sequence {
		lastRow = k + blockSize - 1
		if (lastRow > max1) { lastRow = max1 }
		range = new Range(k, lastRow)
		execute("Transposed LU Factorization"; luEnv; Initialize: range; Partition: args.s)

		mMultEnv = new TaskEnvironment("Subtract Matrix Multiply Result")
		mMultEnv.a = luEnv.u[(lastRow + 1)...max1][k...lastRow]
		mMultEnv.b = luEnv.l[k...lastRow][(lastRow + 1)...max2]
		mMultEnv.c = luEnv.u[(lastRow + 1)...max1][(lastRow + 1)...max2]
		execute("Subtract Matrix Multiply Result"; mMultEnv; 				\
				Partition: args.k, args.l, args.q, args.m, args.n)
	} for k in rows step blockSize

Task "Initiate L & U":
	Define:
		a, u, l: 2D Array of Real single-precision
	Environment:
		a: link
		u, l: create
	Initialize:
		u.dimension1 = l.dimension1 = a.dimension2
                u.dimension2 = l.dimension2 = a.dimension1
	Compute:
		"Prepare" (Space A) {
			do { u[j] = a[...][j] } for j in a
			do { l[i][i] = 1 } for i in l
		}
	Partition (s):
		Space A <1D> {
			a<dim2>, u<dim1>, l<dim1>: strided_block(s)
		}	

Task "Transposed LU Factorization":
	Define:
		u, l: 2D Array of Real single-precision
		p: 1D Array of Integer
		pivot, k: Integer
		l_column: 1D Array of Real single-precision
		t: Epoch
		k_range: Range
	Environment:
		u, l: link
		p: link-or-create
	Initialize (k_range):
		p.dimension = u.dimension1
		l_column.dimension = l.dimension1
	Compute:
		"Select Pivot" (Space A)
		Activate if k in u.local.dimension1.range {
			do {
				pivot maxEntry= u[k][i] 
			} for i in u and i >= k
		}
		"Store Pivot" (Space C) {	
			p[k] = pivot
		}
		"Interchange Rows" (Space B) {
			if (k != pivot) {
				do { 	u[j][k] at (t) = u[j][pivot] at (t-1)
			     		u[j][pivot] at (t) = u[j][k] at (t-1)
				} for j in u and j >= k
				do { 	l[j][k] at (t) = l[j][pivot] at (t-1)
			     		l[j][pivot] at (t) = l[j][k] at (t-1) 
				} for j in l and j < k
			}
		}
		"Update Lower" (Space A)
		Activate if k in l.local.dimension1.range {
			do { l[k][i] = u[k][i] / u[k][k] 
			} for i in l and i > k
			l_column = l[k]
		}
		"Update Upper" (Space B) {
			do { u[j][i] = u[j][i] - l_column[i] * u[j][k] 
			} for i, j in u and i > k and i <= k_range.end and j >= k
		}
		Repeat: from "Select Pivot" for k in k_range
	Partition (s):
		Space C <un-partitioned> { p }
		Space B <1D> {
			u<dim1>, l<dim1>: strided_block(s)
			l_column: replicated
		} 
		Space A <1D> <dynamic> divides Space B partitions { 
			u<dim1>, l<dim1>: block_size (1)
			l_column: replicated
		}


Task "Subtract Matrix Multiply Result":
	Define:
		a, b, c, d: 2D Array of Real single-precision
	Environment:
		a, b, c: link
		d: create
	Initialize:
		d.dimension1 = a.dimension1
		d.dimension2 = b.dimension2
	Compute:
		"Block multiply matrices" (Space C) { 
			do { d[i][j] += a[i][k] * b[k][j]
			} for i, j in c; k in a
		}
		Repeat: from "Block multiply matrices" foreach Space B sub-partition
		"Subtract result" (Space A) {
			do { c[i][j] = c[i][j] - d[i][j]
			} for i, j in c
		}
	Partition (k, l, q, m, n):
		Space A <2D> {
			c, d: block_size(k, l)
		}
		Space B <2D> divides Space A partitions {
			d: replicated, replicated
			a: block_size(k), replicated
			b: replicated, block_size(l)
			Sub-partition <1D> <unordered> {
				a<dim2>, b<dim1>: block_size(q)
			}
		}
		Space C <2D> divides Space B sub-partitions {
			d: block_size(m, n)	
			a: block_size(m), replicated 
			b: replicated, block_size(n)
		}
