Tuple Rectangle:
	top, right, bottom, left: Integer

Tuple Coefficients:
	order: Integer
	values: array[2]: Real Precision Single

Task "Monte Carlo Area Estimation":
	Define:
		shape: List: Coeficients 
		grid: array dimension 2: Rectangle
		subarea_estimate: array dimension 2: Real Precision Single
		point_placements: array dimension 3: Integer
		t: Epoch
		area, cell_size, precision: Real Precision Single
	Environment:
		grid, shape: link
		area: create
	Initialize (precision, cell_size):
		subarea_estimate.dimension = grid.dimension
		point_placements.dimension1 = grid.dimension1
		point_placements.dimension2 = grid.dimension2
		point_placements.dimension3 = partition.p	
	Compute:
		"Calculate point position" (Space A) {
			do { 
				point = generatePoint(grid[i][j])
				point_placements[i][j][k] = computePosition(shape, point)
			} for i, j, k in point_placements
		}
		"Refine Subarea Estimate" (Space B) {
			local_points = point_placements.dimension3.range.length
			do { 
				do {
					internal_points += point_placements[i][j][k]
				} for k in point_placements
				external_points = local_points - internal_points
				total_inside at (t) = total_inside at (t - 1) + internal_points
				total_outside at (t) = total_outside at (t - 1) + external_points
				total_points = (total_inside + total_outside) at (t)
				subarea_estimate[i][j] at (t) \
					= cell_size * (total_inside / total_points) at (t)
				local_precision = subarea_estimate[i][j] at (t) \
						- subarea_estimate[i][j] at (t - 1)
			} for i, j in subarea_estimate
		}
		Repeat: from "Calculate point position" while precision_local > precision
		"Estimate Total Area" (Space C) {
			do {
				area += subarea_estimate[i][j]
			} for i, j in subarea_estimate
		}
	Partition(p):
		Space C <un-partitioned> { subarea_estimate }
		Space B <2D> {
			point_placements<dim1, dim2>: block_size (1, 1)
			grid, subarea_estimate: block_size (1, 1)
		}
		Space A <1D> divides Space B partitions {
			point_placements<dim3>: block_count (p)
			grid: replicated
		}
