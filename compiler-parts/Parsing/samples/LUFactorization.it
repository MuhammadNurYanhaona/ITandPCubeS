Task "LU Factorization":
	Define:
		a, u, l: 2D Array of Real single-precision
		p: 1D Array of Integer
		pivot: Integer
		l_column: 1D Array of Integer
		t: Epoch
	Environment:
		a: link
		u, l, p: create
	Initialize:
		u.dimension = l.dimension = a.dimension
		l_column.dimension = l.dimension1
		p.dimension = a.dimension1
	Compute:
		"Prepare" (Space B) {
			do { u[i][j] = a[i][j] } for i, j in a
			do { l[i][i] = 1 } for i in l
		}
		"Select Pivot" (Space A)
		Activate if k in u.local.dimension2.range {
			do {
				pivot maxEntry= u[i][k] 
			} for i in u and i >= k
		}
		"Store Pivot" (Space C) {	
			p[k] = pivot
		}
		"Interchange Rows" (Space B) {
			if (k != pivot) {
				do { 	u[k][j] at (t) = u[pivot][j] at (t-1)
			     		u[pivot][j] at (t) = u[k][j] at (t-1)
				} for j in u and j >= k
				do { 	l[k][j] at (t) = l[pivot][j] at (t-1)
			     		l[pivot][j] at (t) = l[k][j] at (t-1) 
				} for j in l and j < k
			}
		}
		"Update Lower" (Space A)
		Activate if k in l.local.dimension2.range {
			do { l[i][k] = u[i][k] / u[k][k] 
			} for i in l and i > k
			l_column = l[...][k]
		}
		"Update Upper" (Space B) {
			do { u[i][j] = u[i][j] - l_column[i] * u[k][j] 
			} for i, j in u and i > k and j >= k
		}
		Repeat: from "Select Pivot" for k in a.dimension1.range
	Partition:
		Space C <un-partitioned> { p }
		Space B <1D> {
			a<dim2>, u<dim2>, l<dim2>: strided ()
			l_column: replicated
		} 
		Space A <1D> <dynamic> divides Space B partitions { 
			u<dim2>, l<dim2>: block_size (1)
			l_column: replicated
		}
